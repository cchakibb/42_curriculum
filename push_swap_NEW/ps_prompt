
I am working on the push_swap project from school 42.
I have attached the subject.
I need to create a C program to sort a stack in the most efficient way.

At the beginning I have a stack called 'a' that has random input positive and negative values (no duplicates).
I also have another stack called 'b' that is empty at the beginning. It is kind of a temporary stack.

I have a struct called 't_stack' for my linked lists. It has the following members:
- int value (to store the input value)
- int index (to store the index of each node)
- t_stack *next
- t_stack *prev

The goal of the program is to sort these values from lowest to greatest using authorized moves. The fewer moves the better.
'b' needs to be empty at the end.
Allowed moves are:
- sa(a) (swap 'a': it will swap the first node of 'a' with the second node).
- sb(b) (swap 'b': it will swap the first node of 'b' with the second node).
- ss(a, b) (it calls sa(a) and sb(b) at the same time).
- ra(a) (rotates 'a': the first node (top) of 'a' goes to the bottom (becomes last).
- rb(b) (rotates 'ab: the first node (top) of 'b' goes to the bottom (becomes last).
- rr(a, b) (it calls ra(a) ad rb(b) at the same time).
- rra(a) (reverse rotates 'a': the last node of 'a' (bottom) goes to the top (becomes first).
- rrb(b) (reverse rotates 'b: the last node of 'b' (bottom) goes to the top (becomes first).
- rrr(a, b) (it calls rra(a) and rrb(b) at the same time).
- pa(a, b) (pushes the top node of 'b' to 'a').
- pb(b, a) (pushes the top node of 'a' to 'b'). 

First, my program is checking if 'a' is not already sorted.
if there are only two unsorted nodes, i just use sa(a) and the stack gets sorted.
If there are three unsorted nodes in 'a' I use a function called sort_three that works well already.
if there are four or five unsorted nodes I use a function called sort_four_five that works well already.

I have another function called big_sort for when I have more than 6 nodes to sort. I need help implementing the big_sort algorithm.
What I did so far is that I created a copy of 'a' called 'stack_copy'.
Then I sorted 'stack_copy' without using the moves (I will use stack_copy for comparison only).

So if in the beginning I have as an input 'a': [8, 3, 5, 11, 4, 9, 6, 2, 10, 1, 7, 38, -6]
'stack_copy' would be: [-6, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 38]
'b' is empty at the beginning.

I have a function called set_index that assign an index to each node of a stack and also returns the median value of that stack.
so if do set_index(stack_copy) it will return 6 (6 is the median of 'stack_copy').
in 'stack_copy' '-6' will have the index 0 and '38' (the last node) will have the index 12.

What I did next is that I compare the first node of 'a' with the median of 'stack_copy' (6):
if it's greater or equal than the median value of stack_copy (6) I do ra(a) so that value will go to the bottom of 'a'.
Then I compare the first node of 'a' again, if it's lower than the median of 'stack_copy' I push the first node of 'a' to the top of 'b' using pb(b, a);

This will push the lowest values to 'b' and keep the greatest values in 'a'.
Here is an illustration of what will happen step by step in my example:

stack_copy: [-6, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 38] // this will remain unchanged.
Step 0:
a: [8, 3, 5, 11, 4, 9, 6, 2, 10, 1, 7, 38, -6]
b: []
Step 1:
8 is greater than 6, so I do rotate ra(a)
a: [3, 5, 11, 4, 9, 6, 2, 10, 1, 7, 38, -6, 8]
b: []
Step 2:
3 is lower than 6, so I do pb(b, a)
a: [5, 11, 4, 9, 6, 2, 10, 1, 7, 38, -6, 8]
b: [3]
Step 3:
5 is lower than 6, so I do pb(b, a)
a: [11, 4, 9, 6, 2, 10, 1, 7, 38, -6, 8]
b: [5, 3]
Step 4:
11 is greater than 6, so I do ra(a)
a: [4, 9, 6, 2, 10, 1, 7, 38, -6, 8, 11]
b: [5, 3]
Step 5:
4 is lower than 6, so I do pb(b, a)
a: [9, 6, 2, 10, 1, 7, 38, -6, 8, 11]
b: [4, 5, 3]
Step 6:
9 is greater than 6 so I do ra(a)
a: [6, 2, 10, 1, 7, 38, -6, 8, 11, 9]
b: [4, 5, 3]
Step 7:
6 is greater or equal to 6, so I do ra(a)
a: [2, 10, 1, 7, 38, -6, 8, 11, 9, 6]
b: [4, 5, 3]
Step 8:
2 is lower than 6 so I do pb(b, a)
a: [10, 1, 7, 38, -6, 8, 11, 9, 6]
b: [2, 4, 5, 3]
Step 9:
10 is greater than 6 so I do ra(a)
a: [1, 7, 38, -6, 8, 11, 9, 6, 10]
b: [2, 4, 5, 3]
Step 10:
1 is lower than 6 so I do pb(b)
a: [7, 38, -6, 8, 11, 9, 6, 10]
b: [1, 2, 4, 5, 3]
Step 11:
7 is greater than 6 so I do ra(a)
a: [38, -6, 8, 11, 9, 6, 10, 7]
b: [1, 2, 4, 5, 3]
Step 12:
38 is greater than 6 so I do ra(a)
a: [-6, 8, 11, 9, 6, 10, 7, 38]
b: [1, 2, 4, 5, 3]
Step 13:
-6 is lower than 6 so I do pb(b)
a: [8, 11, 9, 6, 10, 7, 38]
b: [-6, 1, 2, 4, 5, 3]
I stop here because I have compared all nodes from 'a'. -6 was the last node of 'a'.

So now I have:
a: [8, 11, 9, 6, 10, 7, 38]
b: [-6, 1, 2, 4, 5, 3]
I don't know what to do next. Can you assist me please ? Can you be very specific, give detailed examples and tell me step by step what to do ? Feel free to use a bigger stack for 'a' so I understand your logic.
